/// MTGJSON Constants that cannot be changed and are hardcoded intentionally

use std::collections::{HashMap, HashSet};
use std::path::Path;
use chrono::Utc;
use pyo3::prelude::*;

#[pyclass]
pub struct Constants {
    pub TOP_LEVEL_DIR: Path,
    pub RESOURCE_PATH: Path,
    pub CONFIG_PATH: Path,
    pub ENV_OUT_PATH: Path,
    pub LOG_PATH: Path,
    pub MTGJSON_BUILD_DATE: String,
    pub CACHE_PATH: Path,
    pub HASH_TO_GENERATE: String,
    pub CARD_MARKET_BUFFER: String,
    pub CARD_KINGDOM_REFERRAL: String,
    pub FOREIGN_SETS: HashSet<String>,
    pub SUPER_TYPES: HashSet<String>,
    pub BASIC_LAND_NAMES: HashSet<String>,
    pub LANGUAGE_MAP: HashMap<String, String>,
    pub SYMBOL_MAP: HashMap<String, String>,
    pub BAD_FILE_NAMES: HashSet<String>,
    pub SUPPORTED_FORMAT_OUTPUTS: HashSet<String>,
    pub SUPPORTED_SET_TYPES: HashSet<String>,
    pub MULTI_WORD_SUB_TYPES: HashSet<String>,
}

#[pymodule]
pub fn constants() -> PyResult<Constants> {
    Ok(Constants {
            TOP_LEVEL_DIR: Path::new(env!("CARGO_MANIFEST_DIR")).resolve().parent().unwrap(),
            RESOURCE_PATH: Self::TOP_LEVEL_DIR.join("mtgjson5").join("resources"),
            CONFIG_PATH: Self::RESOURCE_PATH.join("mtgjson.properties"),
            ENV_OUT_PATH: Path::new(env!("MTGJSON5_OUTPUT_PATH")).expanduser().resolve(),
            LOG_PATH: Self::ENV_OUT_PATH.join("mtgjson_logs"),
            MTGJSON_BUILD_DATE: Utc::now().format("%Y-%m-%d").to_string(),
            CACHE_PATH: Self::TOP_LEVEL_DIR.join(".mtgjson5_cache"),
            HASH_TO_GENERATE: hashlib::sha256(),
            CARD_MARKET_BUFFER: "10101",
            CARD_KINGDOM_REFERRAL: "?partner=mtgjson&utm_source=mtgjson&utm_medium=affiliate&utm_campaign=mtgjson",
            FOREIGN_SETS: HashSet::from([
                "PMPS11",
                "PS11",
                "PSAL",
                "PMPS10",
                "PMPS09",
                "PMPS08",
                "PMPS07",
                "PMPS06",
                "PSA1",
                "PMPS",
                "PJJT",
                "PHJ",
                "PRED",
                "REN",
                "RIN",
                "4BB",
                "FBB",
            ]),
            SUPER_TYPES: HashSet::from(["Basic", "Host", "Legendary", "Ongoing", "Snow", "World"]),
            BASIC_LAND_NAMES: HashSet::from(["Plains", "Island", "Swamp", "Mountain", "Forest"]),
            LANGUAGE_MAP: HashMap::from([
                ("en", "English"),
                ("es", "Spanish"),
                ("fr", "French"),
                ("de", "German"),
                ("it", "Italian"),
                ("pt", "Portuguese (Brazil)"),
                ("ja", "Japanese"),
                ("ko", "Korean"),
                ("ru", "Russian"),
                ("zhs", "Chinese Simplified"),
                ("zht", "Chinese Traditional"),
                ("he", "Hebrew"),
                ("la", "Latin"),
                ("grc", "Ancient Greek"),
                ("ar", "Arabic"),
                ("sa", "Sanskrit"),
                ("ph", "Phyrexian"),
                ("px", "Phyrexian"),
                ("qya", "Quenya"),
            ]),
            SYMBOL_MAP: HashMap::from([
                ("White", "W"),
                ("Blue", "U"),
                ("Black", "B"),
                ("Red", "R"),
                ("Green", "G"),
                ("Colorless", "C"),
                ("Variable Colorless", "X"),
                ("Snow", "S"),
                ("Energy", "E"),
                ("Phyrexian White", "PW"),
                ("Phyrexian Blue", "PU"),
                ("Phyrexian Black", "PB"),
                ("Phyrexian Red", "PR"),
                ("Phyrexian Green", "PG"),
                ("Two or White", "2W"),
                ("Two or Blue", "2U"),
                ("Two or Black", "2B"),
                ("Two or Red", "2R"),
                ("Two or Green", "2G"),
                ("White or Blue", "WU"),
                ("White or Black", "WB"),
                ("Blue or Black", "UB"),
                ("Blue or Red", "UR"),
                ("Black or Red", "BR"),
                ("Black or Green", "BG"),
                ("Red or Green", "RG"),
                ("Red or White", "GU"),
                ("Green or White", "RW"),
                ("Green or Blue", "GW"),
                ("Half a White", "HW"),
                ("Half a Blue", "HU"),
                ("Half a Black", "HB"),
                ("Half a Red", "HR"),
                ("Half a Green", "HG"),
                ("Tap", "T"),
                ("Untap", "Q"),
                ("Infinite", "âˆž"),
            ]),
            BAD_FILE_NAMES: HashSet::from([
                "AUX",
                "COM0",
                "COM1",
                "COM2",
                "COM3",
                "COM4",
                "COM5",
                "COM6",
                "COM7",
                "COM8",
                "COM9",
                "CON",
                "LPT0",
                "LPT1",
                "LPT2",
                "LPT3",
                "LPT4",
                "LPT5",
                "LPT6",
                "LPT7",
                "LPT8",
                "LPT9",
                "NUL",
                "PRN",
            ]),
            SUPPORTED_FORMAT_OUTPUTS: HashSet::from([
                "standard",
                "pioneer",
                "modern",
                "legacy",
                "vintage",
                "pauper",
            ]),
            SUPPORTED_SET_TYPES: HashSet::from([
                "expansion",
                "core",
                "draft_innovation",
                "commander",
                "masters",
            ]),
            MULTI_WORD_SUB_TYPES: HashSet::from(["Time Lord"]),
        })
    }
}